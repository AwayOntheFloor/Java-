package NewCoder;



/*
 * HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。
 * 今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,
 * 当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？
 * 例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。
 * 你会不会被他忽悠住？(子向量的长度至少是1)
 * 
 * 思路：前面的数加上后面的数之和为整数，否则跳过。
 */
public class No29 {
	public static void main(String[] args) {
	int[] input = {-2,-8,-1,-5,-9}; 
	System.out.println(FindGreatestSumOfSubArray(input));
	}
	
	
public static int FindGreatestSumOfSubArray(int[] array) {
		int max=array[0];//注意，max初始值伟array[0],否则当全为负数的时候，结果为0。
		int tempSum=0;
		for(int i=0;i<array.length;i++){
			tempSum=tempSum+array[i];
			if(tempSum>max){
				max=tempSum;
			}
			if(tempSum<=0){
				tempSum=0;
			}
		}
        return max;
    }
}
