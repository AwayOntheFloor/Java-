package Exam;

import java.util.Scanner;
/*
 * 素数回文数
 */
public class Iqiyi2 {
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
//		int L=scan.nextInt();
//		int R=scan.nextInt();
//		System.out.println(primeAndHuiwen(L,R));
		int N = scan.nextInt();
		
	}
	
	public static int primeAndHuiwen(int L,int R){
		if(R==L&&L==5){
			return 1;
		}else if(R<=5){
			return 0;
		}
		int finalResult=0;
		for(int i=L;i<=R;i++){
			if(isPrime(i)){
				if(Huiwen(i)){
					finalResult++;
				}
			}
		}
		return finalResult;
	}
	
	public static boolean isPrime(int a){//判断是否是素数  
	    for(int i=2 ; i<=Math.sqrt(a) ; i++){  
	        if(a%i==0){  
	            return false;  
	        }  
	    }  
	    return true;  
	}  
	public static boolean Huiwen(int a){
		if(a==reverseNum(a)){
			return true;
		}else{
			return false;
		}
		
	}
	public static int reverseNum(int a){//求反序数  
	    int length1 = (a+"").length();  
	    if(length1==1){  
	        return a;  
	    }  
	    if(length1==2){  
	        int x = a/10;  
	        int y = a%10;  
	        return y*10+x;  
	    }  
	    else{  
	        int x = a/100;  
	        int y = a/10%10;  
	        int z = a%10;  
	        return x+y*10+z*100;  
	    }  
	} 
}






package Exam;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
/*
 * 爱奇艺第三题
 * 
 * 输入字符串，输入数字x，字符串‘a’-'z'，每个字母的个数即为该字母的值，求该字符串总值。
 * 当可以减掉x个字母，求该字符串最小值。
 * 
 * 如输入 aba 1
 * a值=2
 * b值=1
 * 总值2*2+1*1=5；
 * 去掉一个字母 a
 * 此时a值=1
 * b值=1
 * 总值1*1+1*1 =2.
 * 
 */
public class Iqiyi3 {
	public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String str = scan.nextLine();
        int x = scan.nextInt();
        System.out.println(valueMin(str,x));
    }
    public static int valueMin(String str,int x){
    	
    	Map<String,Integer> maps = new HashMap<String,Integer>();
    	for(int i = 0;i<str.length();i++){
    		String key = String.valueOf((str.charAt(i)));
    		if(!maps.containsKey(key)){
    			maps.put(key, 1);
    		}else{
    			int val = maps.get(key);
    			maps.put(key, val+1);
    		}
    	}
    	int count =0;
    	for(Map.Entry i:maps.entrySet()){
    		count++;
    	}
    	int[] arr = new int[count];
    	int count1 =0;
    	for(Map.Entry i:maps.entrySet()){
    		arr[count1] = (int) i.getValue();
    		count1++;
    	}
    
    	sort(arr,0,arr.length-1);
    	int tempresult=0;
    	for(int i=arr.length-1;i>=0;i--){
    		if(arr[i]<=x){
    			x=x-arr[i];
    			//System.out.println(finalresult-tempresult);
    		}else{
    			tempresult = tempresult +(arr[i]-x)*(arr[i]-x);
    			x=0;
    			//System.out.println("now"+tempresult);
    			
    		} 
    	}
    	return tempresult;
    }
    public static void sort(int arr[],int low,int high){
		 int l=low;
		 int h=high;
		 int povit=arr[low];
		 
		 while(l<h){
			 while(l<h&&arr[h]>=povit)
			 h--;
			 
			 if(l<h){
				 int temp=arr[h];
				 arr[h]=arr[l];
				 arr[l]=temp;
				 l++;
			 }
			 
			 while(l<h&&arr[l]<=povit)
			 l++;
			 
			 if(l<h){
				 int temp=arr[h];
				 arr[h]=arr[l];
				 arr[l]=temp;
				 h--;
			 }
		 }
		 if(l>low)sort(arr,low,l-1);
		 if(h<high)sort(arr,l+1,high);
	 }
	
}



/*
 * 一个数组，如果对其进行严格增大的排序，问最少需要移动几个元素
 * 如：321
 * 移动2个
 */
